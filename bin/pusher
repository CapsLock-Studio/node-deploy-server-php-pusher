#!/usr/bin/env php
<?php

function opt($array)
{
    $data = [];
    foreach ($array as $key => $value) {
        $data[] = "{$key}:";
    }

    return $data;
}

$default = [
    "config"  => "",
    "tag"     => "",
    "command" => "",
];

$wrapper = stream_get_wrappers();
$opt     = getopt(null, opt($default));
$setting = array_merge($default, $opt);
$config  = $setting["config"];
$tag     = $setting["tag"];
$command = $setting["command"];
$travis  = getenv("TRAVIS_REPO_SLUG") ?: "/";

list($owner, $repo) = explode("/", $travis);

$dist  = getenv("DIST");
$owner = getenv("OWNER") ?: $owner;
$repo  = getenv("REPO") ?: $repo;

if (!in_array("http", $wrapper)) {
    echo "HTTP wrapper is required", PHP_EOL;
    exit(1);
}

if (!in_array("https", $wrapper)) {
    echo "HTTPS Wrapper is required.", PHP_EOL;
    exit(1);
}

if (!file_exists($config) && !($dist && $owner && $repo)) {
    echo "I cannot find config file :(", PHP_EOL;
    exit(1);
}

$raw = file_exists($config) ? file_get_contents($config) : json_encode($setting);

if (($json = json_decode($raw, true)) && json_last_error() !== JSON_ERROR_NONE) {
    echo "You have to assign a config file with json format", PHP_EOL;
    exit(1);
}

foreach ($json as $jsonKey => $jsonValue) {
    foreach ($setting as $settingKey => $settingValue) {
        if ($settingKey === $jsonKey) {
            $json[$jsonKey] = $settingValue ?: $jsonValue;
        }
    }
}

$json["dist"]  = $dist;
$json["owner"] = $owner;
$json["repo"]  = $repo;

$raw = json_encode($json, JSON_UNESCAPED_SLASHES);

if (!($json["dist"] && $json["owner"] && $json["repo"])) {
    echo "`DIST`, `OWNER`, `REPO` is required in env.", PHP_EOL;
    exit(1);
}

$hash = hash_hmac("sha1", $raw, getenv("SECRET"));

$opts = [
    "http" =>  [
        "method"  => "POST",
        "header"  => ["Content-type: application/json", "X-HUB-SIGNATURE: sha1={$hash}"],
        "content" => $raw
    ]
];

try {
    $context = stream_context_create($opts);
    file_get_contents(getenv("DEPLOY_HOST"), false, $context);
} catch (Exception $e) {
    exit(1);
}
